using System.Collections.Generic;

namespace WindBot.Game.AI
{
    public static class HintMsg
    {
        public const int Release = 500,
        Discard = 501,
        Destroy = 502,
        Remove = 503,
        ToGrave = 504,
        ReturnToHand = 505,
        AddToHand = 506,
        ToDeck = 507,
        Summon = 508,
        SpSummon = 509,
        Set = 510,
        FusionMaterial = 511,
        SynchroMaterial = 512,
        XyzMaterial = 513,
        Faceup = 514,
        Facedown = 515,
        Attack = 516,
        Defense = 517,
        Equip = 518,
        RemoveXyz = 519,
        Control = 520,
        DestroyReplace = 521,
        FaceupAttack = 522,
        FaceupDefense = 523,
        FacedownAttack = 524,
        FacedownDefense = 525,
        Confirm = 526,
        ToField = 527,
        PosChange = 528,
        Self = 529,
        Oppo = 530,
        Tribute = 531,
        DeattachFrom = 532,
        LinkMaterial = 533,
        AttackTarget = 549,
        Effect = 550,
        Target = 551,
        Coin = 552,
        Dice = 553,
        CardType = 554,
        Option = 555,
        ResolveEffect = 556,
        Select = 560,
        Position = 561,
        Attribute = 562,
        Race = 563,
        Code = 564,
        Number = 565,
        LvRank = 567,
        ResolveCard = 568,
        Zone = 569,
        DisableZone = 570,
        ToZone = 571,
        Counter = 572,
        Negate = 575;

        // Reverse lookup dictionary
        private static readonly Dictionary<long, string> _reverseLookup = new Dictionary<long, string>
        {
            { Release, nameof(Release) },
            { Discard, nameof(Discard) },
            { Destroy, nameof(Destroy) },
            { Remove, nameof(Remove) },
            { ToGrave, nameof(ToGrave) },
            { ReturnToHand, nameof(ReturnToHand) },
            { AddToHand, nameof(AddToHand) },
            { ToDeck, nameof(ToDeck) },
            { Summon, nameof(Summon) },
            { SpSummon, nameof(SpSummon) },
            { Set, nameof(Set) },
            { FusionMaterial, nameof(FusionMaterial) },
            { SynchroMaterial, nameof(SynchroMaterial) },
            { XyzMaterial, nameof(XyzMaterial) },
            { Faceup, nameof(Faceup) },
            { Facedown, nameof(Facedown) },
            { Attack, nameof(Attack) },
            { Defense, nameof(Defense) },
            { Equip, nameof(Equip) },
            { RemoveXyz, nameof(RemoveXyz) },
            { Control, nameof(Control) },
            { DestroyReplace, nameof(DestroyReplace) },
            { FaceupAttack, nameof(FaceupAttack) },
            { FaceupDefense, nameof(FaceupDefense) },
            { FacedownAttack, nameof(FacedownAttack) },
            { FacedownDefense, nameof(FacedownDefense) },
            { Confirm, nameof(Confirm) },
            { ToField, nameof(ToField) },
            { PosChange, nameof(PosChange) },
            { Self, nameof(Self) },
            { Oppo, nameof(Oppo) },
            { Tribute, nameof(Tribute) },
            { DeattachFrom, nameof(DeattachFrom) },
            { LinkMaterial, nameof(LinkMaterial) },
            { AttackTarget, nameof(AttackTarget) },
            { Effect, nameof(Effect) },
            { Target, nameof(Target) },
            { Coin, nameof(Coin) },
            { Dice, nameof(Dice) },
            { CardType, nameof(CardType) },
            { Option, nameof(Option) },
            { ResolveEffect, nameof(ResolveEffect) },
            { Select, nameof(Select) },
            { Position, nameof(Position) },
            { Attribute, nameof(Attribute) },
            { Race, nameof(Race) },
            { Code, nameof(Code) },
            { Number, nameof(Number) },
            { LvRank, nameof(LvRank) },
            { ResolveCard, nameof(ResolveCard) },
            { Zone, nameof(Zone) },
            { DisableZone, nameof(DisableZone) },
            { ToZone, nameof(ToZone) },
            { Counter, nameof(Counter) },
            { Negate, nameof(Negate) }
        };

        // Method to get the name by value
        public static string GetHintName(long value)
        {
            if (_reverseLookup.TryGetValue(value, out string name))
            {
                return name;
            }
            return "Unknown";
        }
    }
}
